// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSeriesCalculator.DataAccess.Context;

#nullable disable

namespace TimeSeriesCalculator.DataAccess.Migrations
{
    [DbContext(typeof(TimeSeriesCalculatorDbContext))]
    [Migration("20220726130807_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.PatientChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientChildren");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.TimeSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("P1")
                        .HasColumnType("float");

                    b.Property<double>("P10")
                        .HasColumnType("float");

                    b.Property<double>("P15")
                        .HasColumnType("float");

                    b.Property<double>("P25")
                        .HasColumnType("float");

                    b.Property<double>("P3")
                        .HasColumnType("float");

                    b.Property<double>("P5")
                        .HasColumnType("float");

                    b.Property<double>("P50")
                        .HasColumnType("float");

                    b.Property<double>("P75")
                        .HasColumnType("float");

                    b.Property<double>("P85")
                        .HasColumnType("float");

                    b.Property<double>("P90")
                        .HasColumnType("float");

                    b.Property<double>("P95")
                        .HasColumnType("float");

                    b.Property<double>("P97")
                        .HasColumnType("float");

                    b.Property<double>("P99")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeSeries");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.TimeSeriesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PatientChildId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TryingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PatientChildId");

                    b.ToTable("TimeSeriesHistories");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.ZTimeSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("SD0")
                        .HasColumnType("float");

                    b.Property<double>("SD1")
                        .HasColumnType("float");

                    b.Property<double>("SD1neg")
                        .HasColumnType("float");

                    b.Property<double>("SD2")
                        .HasColumnType("float");

                    b.Property<double>("SD2neg")
                        .HasColumnType("float");

                    b.Property<double>("SD3")
                        .HasColumnType("float");

                    b.Property<double>("SD3neg")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ZTimeSeries");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.PatientChild", b =>
                {
                    b.HasOne("TimeSeriesCalculator.DataAccess.Models.Patient", "Patient")
                        .WithMany("PatientChildren")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.TimeSeriesHistory", b =>
                {
                    b.HasOne("TimeSeriesCalculator.DataAccess.Models.PatientChild", "PatientChild")
                        .WithMany()
                        .HasForeignKey("PatientChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientChild");
                });

            modelBuilder.Entity("TimeSeriesCalculator.DataAccess.Models.Patient", b =>
                {
                    b.Navigation("PatientChildren");
                });
#pragma warning restore 612, 618
        }
    }
}
